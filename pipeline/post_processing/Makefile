PIPELINEROOT := ../
DIR_NAME := post_processing/
include $(PIPELINEROOT)Makefile.common

all: $(VERIFICATIONFILE)

$(OUTPUT_DIR)conditions_not_existing:
	@printf "Conditions with anat. entity not existing in related species:\n" > $@.tmp
	@$(MYSQL) -e "SELECT DISTINCT t1.speciesId, t1.conditionId, t1.exprMappedConditionId, t1.anatEntityId, t3.anatEntityName, t1.stageId, t4.stageName, t1.sex, t1.strain FROM cond AS t1 LEFT OUTER JOIN anatEntityTaxonConstraint AS t2 ON t1.anatEntityId = t2.anatEntityId AND (t2.speciesId IS NULL OR t1.speciesId = t2.speciesId) LEFT OUTER JOIN anatEntity AS t3 ON t3.anatEntityId = t1.anatEntityId LEFT OUTER JOIN stage AS t4 ON t1.stageId = t4.stageId LEFT OUTER JOIN estLibrary AS t10 ON t1.conditionId = t10.conditionId LEFT OUTER JOIN affymetrixChip AS t11 ON t11.conditionId = t1.conditionId LEFT OUTER JOIN rnaSeqLibrary AS t12 ON t12.conditionId = t1.conditionId LEFT OUTER JOIN inSituSpot AS t13 ON t13.conditionId = t1.conditionId WHERE t2.anatEntityId IS NULL AND (t10.conditionId IS NOT NULL OR t11.conditionId IS NOT NULL OR t12.conditionId IS NOT NULL OR t13.conditionId IS NOT NULL) ORDER BY t1.speciesId LIMIT 1000;" >> $@.tmp 2> $@.warn
	@echo >> $@.tmp
	@printf "Conditions with dev. stage not existing in related species:\n" >> $@.tmp
	@$(MYSQL) -e "SELECT DISTINCT t1.speciesId, t1.conditionId, t1.exprMappedConditionId, t1.anatEntityId, t3.anatEntityName, t1.stageId, t4.stageName, t1.sex, t1.strain FROM cond AS t1 LEFT OUTER JOIN stageTaxonConstraint AS t2 ON t1.stageId = t2.stageId AND (t2.speciesId IS NULL OR t1.speciesId = t2.speciesId) LEFT OUTER JOIN anatEntity AS t3 ON t3.anatEntityId = t1.anatEntityId LEFT OUTER JOIN stage AS t4 ON t1.stageId = t4.stageId LEFT OUTER JOIN estLibrary AS t10 ON t1.conditionId = t10.conditionId LEFT OUTER JOIN affymetrixChip AS t11 ON t11.conditionId = t1.conditionId LEFT OUTER JOIN rnaSeqLibrary AS t12 ON t12.conditionId = t1.conditionId LEFT OUTER JOIN inSituSpot AS t13 ON t13.conditionId = t1.conditionId WHERE t2.stageId IS NULL AND (t10.conditionId IS NOT NULL OR t11.conditionId IS NOT NULL OR t12.conditionId IS NOT NULL OR t13.conditionId IS NOT NULL) ORDER BY t1.speciesId LIMIT 1000;" >> $@.tmp 2>> $@.warn
	@$(MV) $@.tmp $@


SQL_CALL_TYPE := IF((estLibPresentHighTotalCount + affymetrixExpPresentHighTotalCount + inSituExpPresentHighTotalCount + rnaSeqExpPresentHighTotalCount) >= 2, 'PRESENT GOLD', IF((estLibPresentHighTotalCount + affymetrixExpPresentHighTotalCount + inSituExpPresentHighTotalCount + rnaSeqExpPresentHighTotalCount) >= 1 OR (estLibPresentLowTotalCount + affymetrixExpPresentLowTotalCount + inSituExpPresentLowTotalCount + rnaSeqExpPresentLowTotalCount) >= 2, 'PRESENT SILVER', IF((estLibPresentLowTotalCount + affymetrixExpPresentLowTotalCount + inSituExpPresentLowTotalCount + rnaSeqExpPresentLowTotalCount) >= 1, 'PRESENT BRONZE', IF((affymetrixExpAbsentHighTotalCount + inSituExpAbsentHighTotalCount + rnaSeqExpAbsentHighTotalCount) >= 2, 'ABSENT GOLD', IF((affymetrixExpAbsentHighTotalCount + inSituExpAbsentHighTotalCount + rnaSeqExpAbsentHighTotalCount) >= 1 OR (affymetrixExpAbsentLowTotalCount + inSituExpAbsentLowTotalCount + rnaSeqExpAbsentLowTotalCount) >= 2, 'ABSENT SILVER', IF((affymetrixExpAbsentLowTotalCount + inSituExpAbsentLowTotalCount + rnaSeqExpAbsentLowTotalCount) >= 1, 'ABSENT BRONZE', 'IMPOSSIBLE'))))))

# Since Bgee 15.0, to allow computations of global expression calls from different nodes, we first insert the global conditions,
# then we insert the global calls (previously it was all done in a same step)
# If you want to tune the number of parallel threads, add:
# -Djava.util.concurrent.ForkJoinPool.common.parallelism=xx
# between $(JAVA_NO_JAR) and -jar $(PIPELINEROOT)$(BGEEPIPELINEJAR)
$(OUTPUT_DIR)globalConditions: $(OUTPUT_DIR)conditions_not_existing
	@$(JAVA_NO_JAR) -Djava.util.concurrent.ForkJoinPool.common.parallelism=20 -jar $(PIPELINEROOT)$(BGEEPIPELINEJAR) InsertPropagatedCalls insertGlobalConditions - - > $@.tmp 2> $@.warn
# Now we update the fields condObservedXXX
	@$(MYSQL) -e "UPDATE globalCond INNER JOIN cond ON (globalCond.anatEntityId = cond.anatEntityId) SET condObservedAnatEntity = 1;" >> $@.tmp 2>> $@.warn
	@$(MYSQL) -e "UPDATE globalCond INNER JOIN cond ON (globalCond.cellTypeId = cond.cellTypeId OR globalCond.cellTypeId = 'GO:0005575' AND cond.cellTypeId IS NULL) SET condObservedCellType = 1;" >> $@.tmp 2>> $@.warn
	@$(MYSQL) -e "UPDATE globalCond INNER JOIN cond ON (globalCond.stageId = cond.stageId) SET condObservedStage = 1;" >> $@.tmp 2>> $@.warn
	@$(MYSQL) -e "UPDATE globalCond INNER JOIN cond ON (globalCond.sex = cond.sex OR globalCond.sex = 'any' AND cond.sex IN ('not annotated', 'mixed', 'NA')) SET condObservedSex = 1;" >> $@.tmp 2>> $@.warn
	@$(MYSQL) -e "UPDATE globalCond INNER JOIN cond ON (globalCond.strain = cond.strain OR globalCond.strain = 'wild-type' AND cond.strain IN ('mix of breed', 'not annotated', 'NA', 'multiple breeds', '(Missing)', 'confidential_restricted_data', 'wild-type', 'mixed-breed')) SET condObservedStrain = 1;" >> $@.tmp 2>> $@.warn
# Now, statistics on globalConds
	@echo "Incorrect insertions (there should be none):" >> $@.tmp
	@$(MYSQL) -e "SELECT t1.globalConditionId AS 'global conditions with no related raw conditions' FROM globalCond AS t1 WHERE NOT EXISTS (SELECT 1 FROM globalCondToCond AS t2 WHERE t2.globalConditionId = t1.globalConditionId) LIMIT 1000" >> $@.tmp 2>> $@.warn
	@$(MYSQL) -e "SELECT DISTINCT t1.conditionId AS 'Raw condition with incorrect corresponding global condition' FROM expression AS t1 WHERE NOT EXISTS (SELECT 1 FROM globalCondToCond AS t2 WHERE t1.conditionId = t2.conditionId AND t2.conditionRelationOrigin = 'self') LIMIT 1000" >> $@.tmp 2>> $@.warn
	@echo "Number of globalConds per species:" >> $@.tmp
	@$(MYSQL) -e "SELECT speciesId, COUNT(*) FROM globalCond GROUP BY speciesId ORDER BY speciesId" >> $@.tmp 2>> $@.warn
	@echo "Distinct IDs used in cellTypeId column" >> $@.tmp
	@$(MYSQL) -e "SELECT DISTINCT cellTypeId FROM globalCond ORDER BY cellTypeId" >> $@.tmp 2>> $@.warn
	@echo "Number of globalCondToCond rows, globalConditionIds, conditionIds, per conditionRelationOrigin:" >> $@.tmp
	@$(MYSQL) -e "SELECT conditionRelationOrigin, COUNT(*), COUNT(DISTINCT globalConditionId), COUNT(DISTINCT conditionId) FROM globalCondToCond GROUP BY conditionRelationOrigin ORDER BY conditionRelationOrigin" >> $@.tmp 2>> $@.warn
	@$(MV) $@.tmp $@

# Since Bgee 15.0 it is possible to run this step in a parallel fashion from different nodes. See comments below.
# It is also possible to compute global expressions using a slurm cluster with the script run_propagation_on_cluster.pl. This script only generate propagated calls. Do not forget to run all the mysql queries of this rule once computation is over on the cluster.
$(OUTPUT_DIR)globalExpression: $(OUTPUT_DIR)globalConditions
# ############################################
# DATA INSERTION
# ############################################
# If you want to tune the number of parallel threads, add:
# -Djava.util.concurrent.ForkJoinPool.common.parallelism=xx
# between $(JAVA_NO_JAR) and -jar $(PIPELINEROOT)$(BGEEPIPELINEJAR)
#
# If you want to launch this step in parallel from different nodes, after "InsertPropagatedCalls insertCalls" the following parameters are used;
# * speciesIds (can be '-' for all species)
# * condition parameter combination (kind of obsolete, should be '-')
# * geneOffset: an int defining the offset of the first gene to retrieve, for each of the requested species independently.
#               For instance, if two species and an offset of 1000 were requested, the first gene retrieved for the first species
#               would have offset 1000 among the genes of that species, the first gene retrieved for the second species
#               would have offset 1000 among the genes of that other species. Can be '-' (equivalent to 0).
# * geneRowCount: an int defining the count of genes to retrieve, for each of the requested species independently.
#                 For instance, if two species and an gene count of 1000 were requested, 1000 genes wwould be retrieved
#                 for the first species, and 1000 genes wwould be retrieved for the second species. Can be '-' (equivalent to 0),
#                 meaning that it has no effect, all genes for each species are retrieved.
# * compute globalConditions: a boolean defining whether global conditions should be computed and inserted
#                             along with the propagation of calls (if 'true' or '1'), or if there were already computed
#                             and inserted, and should be retrieved from the database to propagate the calls (if 'false' or '0').
#                             To be able to run the computations from different nodes, they should hav already been inserted.
#
	@$(JAVA_NO_JAR) -Djava.util.concurrent.ForkJoinPool.common.parallelism=55 -jar $(PIPELINEROOT)$(BGEEPIPELINEJAR) InsertPropagatedCalls insertCalls - - 0 0 0 > $@.tmp 2> $@.warn
#
# ############################################
# DATA VERIFICATION
# ############################################
	@printf "\nSearching for incorrect insertions (there should be none):\n" >> $@.tmp
#
# ## search for missing insertions ##
#
	@$(MYSQL) -e "SELECT t1.globalConditionId AS 'Conditions not used' FROM globalCond AS t1 WHERE NOT EXISTS (SELECT 1 FROM globalExpression AS t2 WHERE t2.globalConditionId = t1.globalConditionId) LIMIT 1000; SELECT t1.expressionId AS 'expression not present in global expression' FROM expression AS t1 WHERE NOT EXISTS (SELECT 1 FROM globalCondToCond AS t2 INNER JOIN globalExpression AS t3 ON t2.globalConditionId = t3.globalConditionId WHERE t2.conditionId = t1.conditionId AND t2.conditionRelationOrigin = 'self' AND t3.bgeeGeneId = t1.bgeeGeneId) LIMIT 1000; SELECT t1.globalConditionId AS 'global conditions with no related raw conditions' FROM globalCond AS t1 WHERE NOT EXISTS (SELECT 1 FROM globalCondToCond AS t2 WHERE t2.globalConditionId = t1.globalConditionId) LIMIT 1000; SELECT t1.globalExpressionId AS 'globalExpression with no supporting raw expression' FROM globalExpression AS t1 WHERE NOT EXISTS (SELECT 1 FROM globalCondToCond AS t2 INNER JOIN expression AS t3 ON t3.conditionId = t2.conditionId WHERE t1.globalConditionId = t2.globalConditionId AND t3.bgeeGeneId = t1.bgeeGeneId) LIMIT 1000;" >> $@.tmp 2>> $@.warn
#
# ## search for inconsistent propagation states/condition parameter combination ##
#
	@$(MYSQL) -e "SELECT t1.globalExpressionId AS 'Inconsistent condition parameter combination/propagation states' FROM globalExpression AS t1 INNER JOIN globalCond AS t2 ON t1.globalConditionId = t2.globalConditionId WHERE ((t2.anatEntityId IS NULL AND (t1.estAnatEntityPropagationState IS NOT NULL OR t1.affymetrixAnatEntityPropagationState IS NOT NULL OR t1.inSituAnatEntityPropagationState IS NOT NULL OR t1.rnaSeqAnatEntityPropagationState IS NOT NULL)) OR (t2.anatEntityId IS NOT NULL AND t1.estAnatEntityPropagationState IS NULL AND t1.affymetrixAnatEntityPropagationState IS NULL AND t1.inSituAnatEntityPropagationState IS NULL AND t1.rnaSeqAnatEntityPropagationState IS NULL)) OR ((t2.stageId IS NULL AND (t1.estStagePropagationState IS NOT NULL OR t1.affymetrixStagePropagationState IS NOT NULL OR t1.inSituStagePropagationState IS NOT NULL OR t1.rnaSeqStagePropagationState IS NOT NULL)) OR (t2.stageId IS NOT NULL AND t1.estStagePropagationState IS NULL AND t1.affymetrixStagePropagationState IS NULL AND t1.inSituStagePropagationState IS NULL AND t1.rnaSeqStagePropagationState IS NULL)) LIMIT 1000;" >> $@.tmp 2>> $@.warn
#
# ## search for inconsistent conditionObservedData/self experiment expression counts ##
#
	@$(MYSQL) -e "SELECT t1.globalExpressionId AS 'EST inconsistent conditionObservedData/SELF experiment counts' FROM globalExpression AS t1 WHERE t1.estConditionObservedData = 1 AND estLibPresentHighSelfCount = 0 AND estLibPresentLowSelfCount = 0 LIMIT 1000; SELECT t1.globalExpressionId AS 'Affymetrix inconsistent conditionObservedData/SELF experiment counts' FROM globalExpression AS t1 WHERE t1.affymetrixConditionObservedData = 1 AND affymetrixExpPresentHighSelfCount = 0 AND affymetrixExpPresentLowSelfCount = 0 AND affymetrixExpAbsentHighSelfCount = 0 AND affymetrixExpAbsentLowSelfCount = 0 LIMIT 1000; SELECT t1.globalExpressionId AS 'In situ inconsistent conditionObservedData/SELF experiment counts' FROM globalExpression AS t1 WHERE t1.inSituConditionObservedData = 1 AND inSituExpPresentHighSelfCount = 0 AND inSituExpPresentLowSelfCount = 0 AND inSituExpAbsentHighSelfCount = 0 AND inSituExpAbsentLowSelfCount = 0 LIMIT 1000; SELECT t1.globalExpressionId AS 'RNA-Seq inconsistent conditionObservedData/SELF experiment counts' FROM globalExpression AS t1 where t1.rnaSeqConditionObservedData = 1 AND rnaSeqExpPresentHighSelfCount = 0 AND rnaSeqExpPresentLowSelfCount = 0 AND rnaSeqExpAbsentHighSelfCount = 0 AND rnaSeqExpAbsentLowSelfCount = 0 LIMIT 1000;" >> $@.tmp 2>> $@.warn
#
	@$(MYSQL) -e "SELECT t1.globalExpressionId AS 'EST inconsistent conditionObservedData/SELF experiment counts' from globalExpression AS t1 where t1.estConditionObservedData = 0 AND (estLibPresentHighSelfCount != 0 OR estLibPresentLowSelfCount != 0) LIMIT 1000; select t1.globalExpressionId AS 'Affymerix inconsistent conditionObservedData/SELF experiment counts' from globalExpression AS t1 where t1.affymetrixConditionObservedData = 0 AND (affymetrixExpPresentHighSelfCount != 0 OR affymetrixExpPresentLowSelfCount != 0 OR affymetrixExpAbsentHighSelfCount != 0 OR affymetrixExpAbsentLowSelfCount != 0) LIMIT 1000; select t1.globalExpressionId AS 'In situ inconsistent conditionObservedData/SELF experiment counts' from globalExpression AS t1 where t1.inSituConditionObservedData = 0 AND (inSituExpPresentHighSelfCount != 0 OR inSituExpPresentLowSelfCount != 0 OR inSituExpAbsentHighSelfCount != 0 OR inSituExpAbsentLowSelfCount != 0) LIMIT 1000; select t1.globalExpressionId AS 'RNA-Seq inconsistent conditionObservedData/SELF experiment counts' from globalExpression AS t1 where t1.rnaSeqConditionObservedData = 0 AND (rnaSeqExpPresentHighSelfCount != 0 OR rnaSeqExpPresentLowSelfCount != 0 OR rnaSeqExpAbsentHighSelfCount != 0 OR rnaSeqExpAbsentLowSelfCount != 0) LIMIT 1000;" >> $@.tmp 2>> $@.warn
#
# ## search for inconsistent conditionObservedData/propagation states ##
# Note that we can still have conditionObservedData = 0 if all of the propagation states include SELF data,
# but the opposite is not true, so we check for this. Also, if all the propagation states include SELF only,
# then conditionObservedData should be equal to 1.
#
	@$(MYSQL) -e "SELECT t1.globalExpressionId AS 'EST inconsistent conditionObservedData/propagation states' FROM globalExpression AS t1 WHERE (t1.estAnatEntityPropagationState IS NULL OR t1.estAnatEntityPropagationState = 'self') AND (t1.estStagePropagationState IS NULL OR t1.estStagePropagationState = 'self') AND estConditionObservedData = 0 LIMIT 1000; SELECT t1.globalExpressionId AS 'Affymetrix inconsistent conditionObservedData/propagation states' FROM globalExpression AS t1 WHERE (t1.affymetrixAnatEntityPropagationState IS NULL OR t1.affymetrixAnatEntityPropagationState = 'self') AND (t1.affymetrixStagePropagationState IS NULL OR t1.affymetrixStagePropagationState = 'self') AND affymetrixConditionObservedData = 0 LIMIT 1000; SELECT t1.globalExpressionId AS 'In situ inconsistent conditionObservedData/propagation states' FROM globalExpression AS t1 WHERE (t1.inSituAnatEntityPropagationState IS NULL OR t1.inSituAnatEntityPropagationState = 'self') AND (t1.inSituStagePropagationState IS NULL OR t1.inSituStagePropagationState = 'self') AND inSituConditionObservedData = 0 LIMIT 1000; SELECT t1.globalExpressionId AS 'RNA-Seq inconsistent conditionObservedData/propagation states' FROM globalExpression AS t1 WHERE (t1.rnaSeqAnatEntityPropagationState IS NULL OR t1.rnaSeqAnatEntityPropagationState = 'self') AND (t1.rnaSeqStagePropagationState IS NULL OR t1.rnaSeqStagePropagationState = 'self') AND rnaSeqConditionObservedData = 0 LIMIT 1000;" >> $@.tmp 2>> $@.warn
#
	@$(MYSQL) -e "SELECT t1.globalExpressionId AS 'EST inconsistent conditionObservedData/propagation states' FROM globalExpression AS t1 WHERE (t1.estAnatEntityPropagationState IN ('descendant') OR t1.estStagePropagationState IN ('descendant')) AND estConditionObservedData = 1 LIMIT 1000; SELECT t1.globalExpressionId AS 'Affymetrix inconsistent conditionObservedData/propagation states' FROM globalExpression AS t1 WHERE (t1.affymetrixAnatEntityPropagationState IN ('ancestor', 'descendant', 'ancestor and descendant') OR t1.affymetrixStagePropagationState IN ('ancestor', 'descendant', 'ancestor and descendant')) AND affymetrixConditionObservedData = 1 LIMIT 1000; SELECT t1.globalExpressionId AS 'In situ inconsistent conditionObservedData/propagation states' FROM globalExpression AS t1 WHERE (t1.inSituAnatEntityPropagationState IN ('ancestor', 'descendant', 'ancestor and descendant') OR t1.inSituStagePropagationState IN ('ancestor', 'descendant', 'ancestor and descendant')) AND inSituConditionObservedData = 1 LIMIT 1000; SELECT t1.globalExpressionId AS 'RNA-Seq inconsistent conditionObservedData/propagation states' FROM globalExpression AS t1 WHERE (t1.rnaSeqAnatEntityPropagationState IN ('ancestor', 'descendant', 'ancestor and descendant') OR t1.rnaSeqStagePropagationState IN ('ancestor', 'descendant', 'ancestor and descendant')) AND rnaSeqConditionObservedData = 1 LIMIT 1000;" >> $@.tmp 2>> $@.warn
#
# ## search for inconsistent propagation states/experiment expression counts ##
#
	@$(MYSQL) -e "SELECT t1.globalExpressionId AS 'Affymetrix inconsistent propagation states/experiment expression counts' FROM globalExpression AS t1 WHERE (t1.affymetrixAnatEntityPropagationState IN ('all', 'ancestor', 'self and ancestor', 'ancestor and descendant') OR t1.affymetrixStagePropagationState IN ('all', 'ancestor', 'self and ancestor', 'ancestor and descendant')) AND (t1.affymetrixExpAbsentHighParentCount + t1.affymetrixExpAbsentLowParentCount) = 0 LIMIT 1000; SELECT t1.globalExpressionId AS 'In situ inconsistent propagation states/experiment expression counts' FROM globalExpression AS t1 WHERE (t1.inSituAnatEntityPropagationState IN ('all', 'ancestor', 'self and ancestor', 'ancestor and descendant') OR t1.inSituStagePropagationState IN ('all', 'ancestor', 'self and ancestor', 'ancestor and descendant')) AND (t1.inSituExpAbsentHighParentCount + t1.inSituExpAbsentLowParentCount) = 0 LIMIT 1000; SELECT t1.globalExpressionId AS 'RNA-Seq inconsistent propagation states/experiment expression counts' FROM globalExpression AS t1 WHERE (t1.rnaSeqAnatEntityPropagationState IN ('all', 'ancestor', 'self and ancestor', 'ancestor and descendant') OR t1.rnaSeqStagePropagationState IN ('all', 'ancestor', 'self and ancestor', 'ancestor and descendant')) AND (t1.rnaSeqExpAbsentHighParentCount + t1.rnaSeqExpAbsentLowParentCount) = 0 LIMIT 1000;" >> $@.tmp 2>> $@.warn
#
	@$(MYSQL) -e "SELECT t1.globalExpressionId AS 'EST inconsistent propagation states/experiment expression counts' FROM globalExpression AS t1 WHERE (t1.estAnatEntityPropagationState IN ('all', 'descendant', 'self and descendant', 'ancestor and descendant') OR t1.estStagePropagationState IN ('all', 'descendant', 'self and descendant', 'ancestor and descendant')) AND (t1.estLibPresentHighDescendantCount + t1.estLibPresentLowDescendantCount) = 0 LIMIT 1000; SELECT t1.globalExpressionId AS 'Affymetrix inconsistent propagation states/experiment expression counts' FROM globalExpression AS t1 WHERE (t1.affymetrixAnatEntityPropagationState IN ('all', 'descendant', 'self and descendant', 'ancestor and descendant') OR t1.affymetrixStagePropagationState IN ('all', 'descendant', 'self and descendant', 'ancestor and descendant')) AND (t1.affymetrixExpPresentHighDescendantCount + t1.affymetrixExpPresentLowDescendantCount) = 0 LIMIT 1000; SELECT t1.globalExpressionId AS 'In situ inconsistent propagation states/experiment expression counts' FROM globalExpression AS t1 WHERE (t1.inSituAnatEntityPropagationState IN ('all', 'descendant', 'self and descendant', 'ancestor and descendant') OR t1.inSituStagePropagationState IN ('all', 'descendant', 'self and descendant', 'ancestor and descendant')) AND (t1.inSituExpPresentHighDescendantCount + t1.inSituExpPresentLowDescendantCount) = 0 LIMIT 1000; SELECT t1.globalExpressionId AS 'RNA-Seq inconsistent propagation states/experiment expression counts' FROM globalExpression AS t1 WHERE (t1.rnaSeqAnatEntityPropagationState IN ('all', 'descendant', 'self and descendant', 'ancestor and descendant') OR t1.rnaSeqStagePropagationState IN ('all', 'descendant', 'self and descendant', 'ancestor and descendant')) AND (t1.rnaSeqExpPresentHighDescendantCount + t1.rnaSeqExpPresentLowDescendantCount) = 0 LIMIT 1000;" >> $@.tmp 2>> $@.warn
#
	@$(MYSQL) -e "SELECT t1.globalExpressionId AS 'EST inconsistent propagation states/experiment expression counts' FROM globalExpression AS t1 WHERE (t1.estAnatEntityPropagationState IS NULL OR t1.estAnatEntityPropagationState = 'self') AND (t1.estStagePropagationState IS NULL OR t1.estStagePropagationState = 'self') AND (t1.estAnatEntityPropagationState IS NOT NULL OR t1.estStagePropagationState IS NOT NULL) AND (t1.estLibPresentHighSelfCount + t1.estLibPresentLowSelfCount) = 0 LIMIT 1000; SELECT t1.globalExpressionId AS 'Affymetrix inconsistent propagation states/experiment expression counts' FROM globalExpression AS t1 WHERE (t1.affymetrixAnatEntityPropagationState IS NULL OR t1.affymetrixAnatEntityPropagationState = 'self') AND (t1.affymetrixStagePropagationState IS NULL OR t1.affymetrixStagePropagationState = 'self') AND (t1.affymetrixAnatEntityPropagationState IS NOT NULL OR t1.affymetrixStagePropagationState IS NOT NULL) AND (t1.affymetrixExpPresentHighSelfCount + t1.affymetrixExpPresentLowSelfCount + t1.affymetrixExpAbsentHighSelfCount + t1.affymetrixExpAbsentLowSelfCount) = 0 LIMIT 1000; SELECT t1.globalExpressionId AS 'In situ inconsistent propagation states/experiment expression counts' FROM globalExpression AS t1 WHERE (t1.inSituAnatEntityPropagationState IS NULL OR t1.inSituAnatEntityPropagationState = 'self') AND (t1.inSituStagePropagationState IS NULL OR t1.inSituStagePropagationState = 'self') AND (t1.inSituAnatEntityPropagationState IS NOT NULL OR t1.inSituStagePropagationState IS NOT NULL) AND (t1.inSituExpPresentHighSelfCount + t1.inSituExpPresentLowSelfCount + t1.inSituExpAbsentHighSelfCount + t1.inSituExpAbsentLowSelfCount) = 0 LIMIT 1000; SELECT t1.globalExpressionId AS 'RNA-Seq inconsistent propagation states/experiment expression counts' FROM globalExpression AS t1 WHERE (t1.rnaSeqAnatEntityPropagationState IS NULL OR t1.rnaSeqAnatEntityPropagationState = 'self') AND (t1.rnaSeqStagePropagationState IS NULL OR t1.rnaSeqStagePropagationState = 'self') AND (t1.rnaSeqAnatEntityPropagationState IS NOT NULL OR t1.rnaSeqStagePropagationState IS NOT NULL) AND (t1.rnaSeqExpPresentHighSelfCount + t1.rnaSeqExpPresentLowSelfCount + t1.rnaSeqExpAbsentHighSelfCount + t1.rnaSeqExpAbsentLowSelfCount) = 0 LIMIT 1000;" >> $@.tmp 2>> $@.warn
#
# ## search for partial updates of fields ##
#
	@$(MYSQL) -e "SELECT t1.globalExpressionId AS 'EST partial update of fields' FROM globalExpression AS t1 WHERE (t1.estAnatEntityPropagationState IS NULL AND t1.estAnatEntityPropagationState IS NULL OR t1.estConditionObservedData IS NULL) AND (t1.estLibPresentHighSelfCount + t1.estLibPresentLowSelfCount + t1.estLibPresentHighDescendantCount + t1.estLibPresentLowDescendantCount + t1.estLibPresentHighTotalCount + t1.estLibPresentLowTotalCount + t1.estLibPropagatedCount) != 0 LIMIT 1000; SELECT t1.globalExpressionId AS 'Affymetrix partial update of fields' FROM globalExpression AS t1 WHERE (t1.affymetrixAnatEntityPropagationState IS NULL AND t1.affymetrixAnatEntityPropagationState IS NULL OR t1.affymetrixConditionObservedData IS NULL) AND (t1.affymetrixExpPresentHighSelfCount + t1.affymetrixExpPresentLowSelfCount + t1.affymetrixExpAbsentHighSelfCount + t1.affymetrixExpAbsentLowSelfCount + t1.affymetrixExpPresentHighDescendantCount + t1.affymetrixExpPresentLowDescendantCount + t1.affymetrixExpAbsentHighParentCount + t1.affymetrixExpAbsentLowParentCount + t1.affymetrixExpPresentHighTotalCount + t1.affymetrixExpPresentLowTotalCount + t1.affymetrixExpAbsentHighTotalCount + t1.affymetrixExpAbsentLowTotalCount + t1.affymetrixExpPropagatedCount) != 0 LIMIT 1000; SELECT t1.globalExpressionId AS 'In situ partial update of fields' FROM globalExpression AS t1 WHERE (t1.inSituAnatEntityPropagationState IS NULL AND t1.inSituAnatEntityPropagationState IS NULL OR t1.inSituConditionObservedData IS NULL) AND (t1.inSituExpPresentHighSelfCount + t1.inSituExpPresentLowSelfCount + t1.inSituExpAbsentHighSelfCount + t1.inSituExpAbsentLowSelfCount + t1.inSituExpPresentHighDescendantCount + t1.inSituExpPresentLowDescendantCount + t1.inSituExpAbsentHighParentCount + t1.inSituExpAbsentLowParentCount + t1.inSituExpPresentHighTotalCount + t1.inSituExpPresentLowTotalCount + t1.inSituExpAbsentHighTotalCount + t1.inSituExpAbsentLowTotalCount + t1.inSituExpPropagatedCount) != 0 LIMIT 1000; SELECT t1.globalExpressionId AS 'RNA-Seq partial update of fields' FROM globalExpression AS t1 WHERE (t1.rnaSeqAnatEntityPropagationState IS NULL AND t1.rnaSeqAnatEntityPropagationState IS NULL OR t1.rnaSeqConditionObservedData IS NULL) AND (t1.rnaSeqExpPresentHighSelfCount + t1.rnaSeqExpPresentLowSelfCount + t1.rnaSeqExpAbsentHighSelfCount + t1.rnaSeqExpAbsentLowSelfCount + t1.rnaSeqExpPresentHighDescendantCount + t1.rnaSeqExpPresentLowDescendantCount + t1.rnaSeqExpAbsentHighParentCount + t1.rnaSeqExpAbsentLowParentCount + t1.rnaSeqExpPresentHighTotalCount + t1.rnaSeqExpPresentLowTotalCount + t1.rnaSeqExpAbsentHighTotalCount + t1.rnaSeqExpAbsentLowTotalCount + t1.rnaSeqExpPropagatedCount) != 0 LIMIT 1000;" >> $@.tmp 2>> $@.warn
#
	@$(MYSQL) -e "SELECT t1.globalExpressionId AS 'globalExpressionId with no experiment expression counts' FROM globalExpression AS t1 WHERE (estLibPresentHighTotalCount IS NULL OR estLibPresentHighTotalCount = 0) AND (estLibPresentLowTotalCount IS NULL OR estLibPresentLowTotalCount = 0) AND (affymetrixExpPresentHighTotalCount IS NULL OR affymetrixExpPresentHighTotalCount = 0) AND (affymetrixExpPresentLowTotalCount IS NULL OR affymetrixExpPresentLowTotalCount = 0) AND (affymetrixExpAbsentHighTotalCount IS NULL OR affymetrixExpAbsentHighTotalCount = 0) AND (affymetrixExpAbsentLowTotalCount IS NULL OR affymetrixExpAbsentLowTotalCount = 0) AND (inSituExpPresentHighTotalCount IS NULL OR inSituExpPresentHighTotalCount = 0) AND (inSituExpPresentLowTotalCount IS NULL OR inSituExpPresentLowTotalCount = 0) AND (inSituExpAbsentHighTotalCount IS NULL OR inSituExpAbsentHighTotalCount = 0) AND (inSituExpAbsentLowTotalCount IS NULL OR inSituExpAbsentLowTotalCount = 0) AND (rnaSeqExpPresentHighTotalCount IS NULL OR rnaSeqExpPresentHighTotalCount = 0) AND (rnaSeqExpPresentLowTotalCount IS NULL OR rnaSeqExpPresentLowTotalCount = 0) AND (rnaSeqExpAbsentHighTotalCount IS NULL OR rnaSeqExpAbsentHighTotalCount = 0) AND (rnaSeqExpAbsentLowTotalCount IS NULL OR rnaSeqExpAbsentLowTotalCount = 0) LIMIT 1000;" >> $@.tmp 2>> $@.warn
#
# ## search for inconsistent insertion in globalCondToCond table ##
#
	@$(MYSQL) -e "SELECT t1.globalExpressionId AS 'EST inconsistent insertion into globalCondToCond table' FROM globalExpression AS t1 WHERE (t1.estAnatEntityPropagationState IN ('all', 'descendant', 'self and descendant', 'ancestor and descendant') OR t1.estStagePropagationState IN ('all', 'descendant', 'self and descendant', 'ancestor and descendant')) AND NOT EXISTS (SELECT 1 FROM globalCondToCond AS t2 WHERE t2.globalConditionId = t1.globalConditionId AND t2.conditionRelationOrigin = 'descendant') LIMIT 1000; SELECT t1.globalExpressionId AS 'Affymetrix inconsistent insertion into globalCondToCond table' FROM globalExpression AS t1 WHERE (t1.affymetrixAnatEntityPropagationState IN ('all', 'descendant', 'self and descendant', 'ancestor and descendant') OR t1.affymetrixStagePropagationState IN ('all', 'descendant', 'self and descendant', 'ancestor and descendant')) AND NOT EXISTS (SELECT 1 FROM globalCondToCond AS t2 WHERE t2.globalConditionId = t1.globalConditionId AND t2.conditionRelationOrigin = 'descendant') LIMIT 1000; SELECT t1.globalExpressionId AS 'In situ inconsistent insertion into globalCondToCond table' FROM globalExpression AS t1 WHERE (t1.inSituAnatEntityPropagationState IN ('all', 'descendant', 'self and descendant', 'ancestor and descendant') OR t1.inSituStagePropagationState IN ('all', 'descendant', 'self and descendant', 'ancestor and descendant')) AND NOT EXISTS (SELECT 1 FROM globalCondToCond AS t2 WHERE t2.globalConditionId = t1.globalConditionId AND t2.conditionRelationOrigin = 'descendant') LIMIT 1000; SELECT t1.globalExpressionId AS 'RNA-Seq inconsistent insertion into globalCondToCond table' FROM globalExpression AS t1 WHERE (t1.rnaSeqAnatEntityPropagationState IN ('all', 'descendant', 'self and descendant', 'ancestor and descendant') OR t1.rnaSeqStagePropagationState IN ('all', 'descendant', 'self and descendant', 'ancestor and descendant')) AND NOT EXISTS (SELECT 1 FROM globalCondToCond AS t2 WHERE t2.globalConditionId = t1.globalConditionId AND t2.conditionRelationOrigin = 'descendant') LIMIT 1000;" >> $@.tmp 2>> $@.warn
#
	@$(MYSQL) -e "SELECT t1.globalExpressionId AS 'Affymetrix inconsistent insertion into globalCondToCond table' FROM globalExpression AS t1 WHERE (t1.affymetrixAnatEntityPropagationState IN ('all', 'ancestor', 'self and ancestor', 'ancestor and descendant') OR t1.affymetrixStagePropagationState IN ('all', 'ancestor', 'self and ancestor', 'ancestor and descendant')) AND NOT EXISTS (SELECT 1 FROM globalCondToCond AS t2 WHERE t2.globalConditionId = t1.globalConditionId AND t2.conditionRelationOrigin = 'parent') LIMIT 1000; SELECT t1.globalExpressionId AS 'In situ inconsistent insertion into globalCondToCond table' FROM globalExpression AS t1 WHERE (t1.inSituAnatEntityPropagationState IN ('all', 'ancestor', 'self and ancestor', 'ancestor and descendant') OR t1.inSituStagePropagationState IN ('all', 'ancestor', 'self and ancestor', 'ancestor and descendant')) AND NOT EXISTS (SELECT 1 FROM globalCondToCond AS t2 WHERE t2.globalConditionId = t1.globalConditionId AND t2.conditionRelationOrigin = 'parent') LIMIT 1000; SELECT t1.globalExpressionId AS 'RNA-Seq inconsistent insertion into globalCondToCond table' FROM globalExpression AS t1 WHERE (t1.rnaSeqAnatEntityPropagationState IN ('all', 'ancestor', 'self and ancestor', 'ancestor and descendant') OR t1.rnaSeqStagePropagationState IN ('all', 'ancestor', 'self and ancestor', 'ancestor and descendant')) AND NOT EXISTS (SELECT 1 FROM globalCondToCond AS t2 WHERE t2.globalConditionId = t1.globalConditionId AND t2.conditionRelationOrigin = 'parent') LIMIT 1000;" >> $@.tmp 2>> $@.warn
#
# Each raw cond used in the expression table should generate at least one self global cond per condition parameter combination
#
	@$(MYSQL) -e "SELECT DISTINCT t1.conditionId AS 'Raw condition with incorrect corresponding global condition' FROM expression AS t1 WHERE (SELECT COUNT(*) FROM globalCondToCond AS t2 INNER JOIN globalCond AS t3 ON t2.globalConditionId = t3.globalConditionId AND t3.anatEntityId IS NOT NULL AND t3.stageId IS NULL AND t3.sex IS NULL AND t3.strain IS NULL WHERE t1.conditionId = t2.conditionId AND t2.conditionRelationOrigin = 'self') != 1 OR (SELECT COUNT(*) FROM globalCondToCond AS t2 INNER JOIN globalCond AS t3 ON t2.globalConditionId = t3.globalConditionId AND t3.anatEntityId IS NOT NULL AND t3.stageId IS NOT NULL AND t3.sex IS NULL AND t3.strain IS NULL WHERE t1.conditionId = t2.conditionId AND t2.conditionRelationOrigin = 'self') != 1 LIMIT 10;" >> $@.tmp 2>> $@.warn
#
# ## search for global expression calls with no supporting raw data ##
#
	@$(MYSQL) -e "SELECT t1.globalExpressionId AS 'EST inconsistent EXPRESSED LOW QUAL raw data/global expression calls' FROM globalExpression AS t1 WHERE t1.estLibPresentLowTotalCount != 0 AND NOT EXISTS (SELECT 1 FROM globalCondToCond AS t1bis INNER JOIN expression AS t2 ON t2.conditionId = t1bis.conditionId AND t1bis.conditionRelationOrigin IN ('self', 'descendant') INNER JOIN estLibraryExpression AS t3 ON t3.expressionId = t2.expressionId WHERE t1.globalConditionId = t1bis.globalConditionId AND t3.estLibraryCallQuality = 'poor quality' AND t2.bgeeGeneId = t1.bgeeGeneId) LIMIT 1; SELECT t1.globalExpressionId AS 'Affymetrix inconsistent EXPRESSED LOW QUAL raw data/global expression calls' FROM globalExpression AS t1 WHERE t1.affymetrixExpPresentLowTotalCount != 0 AND NOT EXISTS (SELECT 1 from globalCondToCond AS t1bis INNER JOIN expression AS t2 ON t2.conditionId = t1bis.conditionId AND t1bis.conditionRelationOrigin IN ('self', 'descendant') INNER JOIN microarrayExperimentExpression AS t3 ON t3.expressionId = t2.expressionId WHERE t1.globalConditionId = t1bis.globalConditionId  AND t2.bgeeGeneId = t1.bgeeGeneId AND t3.microarrayExperimentCallQuality = 'poor quality' AND t3.microarrayExperimentCallDirection = 'present') LIMIT 1; SELECT t1.globalExpressionId AS 'In situ inconsistent EXPRESSED LOW QUAL raw data/global expression calls' FROM globalExpression AS t1 WHERE t1.inSituExpPresentLowTotalCount != 0 AND NOT EXISTS (SELECT 1 FROM globalCondToCond AS t1bis INNER JOIN expression AS t2 ON t2.conditionId = t1bis.conditionId AND t1bis.conditionRelationOrigin IN ('self', 'descendant') INNER JOIN inSituExperimentExpression AS t3 ON t3.expressionId = t2.expressionId WHERE t1.globalConditionId = t1bis.globalConditionId AND t2.bgeeGeneId = t1.bgeeGeneId AND t3.inSituExperimentCallQuality = 'poor quality' AND t3.inSituExperimentCallDirection = 'present') LIMIT 1; SELECT t1.globalExpressionId AS 'RNA-Seq inconsistent EXPRESSED LOW QUAL raw data/global expression calls' FROM globalExpression AS t1 WHERE t1.rnaSeqExpPresentLowTotalCount != 0 AND NOT EXISTS (SELECT 1 FROM globalCondToCond AS t1bis INNER JOIN expression AS t2 ON t2.conditionId = t1bis.conditionId AND t1bis.conditionRelationOrigin IN ('self', 'descendant') INNER JOIN rnaSeqExperimentExpression AS t3 ON t3.expressionId = t2.expressionId WHERE t1.globalConditionId = t1bis.globalConditionId AND t2.bgeeGeneId = t1.bgeeGeneId AND t3.rnaSeqExperimentCallQuality = 'poor quality' AND t3.rnaSeqExperimentCallDirection = 'present') LIMIT 1;" >> $@.tmp 2>> $@.warn
#
	@$(MYSQL) -e "SELECT t1.globalExpressionId AS 'EST inconsistent EXPRESSED HIGH QUAL raw data/global expression calls' FROM globalExpression AS t1 WHERE t1.estLibPresentHighTotalCount != 0 AND NOT EXISTS (SELECT 1 FROM globalCondToCond AS t1bis INNER JOIN expression AS t2 ON t2.conditionId = t1bis.conditionId AND t1bis.conditionRelationOrigin IN ('self', 'descendant') INNER JOIN estLibraryExpression AS t3 ON t3.expressionId = t2.expressionId WHERE t1.globalConditionId = t1bis.globalConditionId AND t3.estLibraryCallQuality = 'high quality' AND t2.bgeeGeneId = t1.bgeeGeneId) LIMIT 1; SELECT t1.globalExpressionId AS 'Affymetrix inconsistent EXPRESSED HIGH QUAL raw data/global expression calls' FROM globalExpression AS t1 WHERE t1.affymetrixExpPresentHighTotalCount != 0 AND NOT EXISTS (SELECT 1 from globalCondToCond AS t1bis INNER JOIN expression AS t2 ON t2.conditionId = t1bis.conditionId AND t1bis.conditionRelationOrigin IN ('self', 'descendant') INNER JOIN microarrayExperimentExpression AS t3 ON t3.expressionId = t2.expressionId WHERE t1.globalConditionId = t1bis.globalConditionId  AND t2.bgeeGeneId = t1.bgeeGeneId AND t3.microarrayExperimentCallQuality = 'high quality' AND t3.microarrayExperimentCallDirection = 'present') LIMIT 1; SELECT t1.globalExpressionId AS 'In situ inconsistent EXPRESSED HIGH QUAL raw data/global expression calls' FROM globalExpression AS t1 WHERE t1.inSituExpPresentHighTotalCount != 0 AND NOT EXISTS (SELECT 1 FROM globalCondToCond AS t1bis INNER JOIN expression AS t2 ON t2.conditionId = t1bis.conditionId AND t1bis.conditionRelationOrigin IN ('self', 'descendant') INNER JOIN inSituExperimentExpression AS t3 ON t3.expressionId = t2.expressionId WHERE t1.globalConditionId = t1bis.globalConditionId AND t2.bgeeGeneId = t1.bgeeGeneId AND t3.inSituExperimentCallQuality = 'high quality' AND t3.inSituExperimentCallDirection = 'present') LIMIT 1; SELECT t1.globalExpressionId AS 'RNA-Seq inconsistent EXPRESSED HIGH QUAL raw data/global expression calls' FROM globalExpression AS t1 WHERE t1.rnaSeqExpPresentHighTotalCount != 0 AND NOT EXISTS (SELECT 1 FROM globalCondToCond AS t1bis INNER JOIN expression AS t2 ON t2.conditionId = t1bis.conditionId AND t1bis.conditionRelationOrigin IN ('self', 'descendant') INNER JOIN rnaSeqExperimentExpression AS t3 ON t3.expressionId = t2.expressionId WHERE t1.globalConditionId = t1bis.globalConditionId AND t2.bgeeGeneId = t1.bgeeGeneId AND t3.rnaSeqExperimentCallQuality = 'high quality' AND t3.rnaSeqExperimentCallDirection = 'present') LIMIT 1;" >> $@.tmp 2>> $@.warn
#
	@$(MYSQL) -e "SELECT t1.globalExpressionId AS 'Affymetrix inconsistent ABSENT LOW QUAL raw data/global expression calls' FROM globalExpression AS t1 WHERE t1.affymetrixExpAbsentLowTotalCount != 0 AND NOT EXISTS (SELECT 1 from globalCondToCond AS t1bis INNER JOIN expression AS t2 ON t2.conditionId = t1bis.conditionId AND t1bis.conditionRelationOrigin IN ('self', 'parent') INNER JOIN microarrayExperimentExpression AS t3 ON t3.expressionId = t2.expressionId WHERE t1.globalConditionId = t1bis.globalConditionId  AND t2.bgeeGeneId = t1.bgeeGeneId AND t3.microarrayExperimentCallQuality = 'poor quality' AND t3.microarrayExperimentCallDirection = 'absent') LIMIT 1; SELECT t1.globalExpressionId AS 'In situ inconsistent ABSENT LOW QUAL raw data/global expression calls' FROM globalExpression AS t1 WHERE t1.inSituExpAbsentLowTotalCount != 0 AND NOT EXISTS (SELECT 1 FROM globalCondToCond AS t1bis INNER JOIN expression AS t2 ON t2.conditionId = t1bis.conditionId AND t1bis.conditionRelationOrigin IN ('self', 'parent') INNER JOIN inSituExperimentExpression AS t3 ON t3.expressionId = t2.expressionId WHERE t1.globalConditionId = t1bis.globalConditionId AND t2.bgeeGeneId = t1.bgeeGeneId AND t3.inSituExperimentCallQuality = 'poor quality' AND t3.inSituExperimentCallDirection = 'absent') LIMIT 1;  SELECT t1.globalExpressionId AS 'RNA-Seq inconsistent ABSENT LOW QUAL raw data/global expression calls' FROM globalExpression AS t1 WHERE t1.rnaSeqExpAbsentLowTotalCount != 0 AND NOT EXISTS (SELECT 1 FROM globalCondToCond AS t1bis INNER JOIN expression AS t2 ON t2.conditionId = t1bis.conditionId AND t1bis.conditionRelationOrigin IN ('self', 'parent') INNER JOIN rnaSeqExperimentExpression AS t3 ON t3.expressionId = t2.expressionId WHERE t1.globalConditionId = t1bis.globalConditionId AND t2.bgeeGeneId = t1.bgeeGeneId AND t3.rnaSeqExperimentCallQuality = 'poor quality' AND t3.rnaSeqExperimentCallDirection = 'absent') LIMIT 1;" >> $@.tmp 2>> $@.warn
#
	@$(MYSQL) -e "SELECT t1.globalExpressionId AS 'Affymetrix inconsistent ABSENT HIGH QUAL raw data/global expression calls' FROM globalExpression AS t1 WHERE t1.affymetrixExpAbsentHighTotalCount != 0 AND NOT EXISTS (SELECT 1 from globalCondToCond AS t1bis INNER JOIN expression AS t2 ON t2.conditionId = t1bis.conditionId AND t1bis.conditionRelationOrigin IN ('self', 'parent') INNER JOIN microarrayExperimentExpression AS t3 ON t3.expressionId = t2.expressionId WHERE t1.globalConditionId = t1bis.globalConditionId  AND t2.bgeeGeneId = t1.bgeeGeneId AND t3.microarrayExperimentCallQuality = 'high quality' AND t3.microarrayExperimentCallDirection = 'absent') LIMIT 1; SELECT t1.globalExpressionId AS 'In situ inconsistent ABSENT HIGH QUAL raw data/global expression calls' FROM globalExpression AS t1 WHERE t1.inSituExpAbsentHighTotalCount != 0 AND NOT EXISTS (SELECT 1 FROM globalCondToCond AS t1bis INNER JOIN expression AS t2 ON t2.conditionId = t1bis.conditionId AND t1bis.conditionRelationOrigin IN ('self', 'parent') INNER JOIN inSituExperimentExpression AS t3 ON t3.expressionId = t2.expressionId WHERE t1.globalConditionId = t1bis.globalConditionId AND t2.bgeeGeneId = t1.bgeeGeneId AND t3.inSituExperimentCallQuality = 'high quality' AND t3.inSituExperimentCallDirection = 'absent') LIMIT 1; SELECT t1.globalExpressionId AS 'RNA-Seq inconsistent ABSENT HIGH QUAL raw data/global expression calls' FROM globalExpression AS t1 WHERE t1.rnaSeqExpAbsentHighTotalCount != 0 AND NOT EXISTS (SELECT 1 FROM globalCondToCond AS t1bis INNER JOIN expression AS t2 ON t2.conditionId = t1bis.conditionId AND t1bis.conditionRelationOrigin IN ('self', 'parent') INNER JOIN rnaSeqExperimentExpression AS t3 ON t3.expressionId = t2.expressionId WHERE t1.globalConditionId = t1bis.globalConditionId AND t2.bgeeGeneId = t1.bgeeGeneId AND t3.rnaSeqExperimentCallQuality = 'high quality' AND t3.rnaSeqExperimentCallDirection = 'absent') LIMIT 1;" >> $@.tmp 2>> $@.warn
#
# ## search for raw data with no associated production of global call ##
#
# ## NOTES
#
# The queries used to look like this (for instance, for Affymetrix):
#
# SELECT t1.expressionId AS 'Missing Affymetrix PRESENT LOW global expression calls'
# FROM microarrayExperimentExpression AS t1
# WHERE t1.microarrayExperimentCallDirection = 'present' AND t1.microarrayExperimentCallQuality = 'poor quality'
# AND NOT EXISTS (
#   SELECT 1 FROM expression AS t1bis
#   INNER JOIN globalCondToCond AS t2 ON t1bis.conditionId = t2.conditionId
#   INNER JOIN globalExpression AS t3 ON t2.globalConditionId = t3.globalConditionId AND t3.bgeeGeneId = t1bis.bgeeGeneId
#   WHERE t1bis.expressionId = t1.expressionId AND t2.conditionRelationOrigin = 'self'
#   AND (t3.affymetrixExpPresentLowSelfCount != 0 OR t3.affymetrixExpPresentLowDescendantCount != 0)
#   AND t3.affymetrixExpPresentLowTotalCount != 0
# )
# LIMIT 1000;
#
# And we would do one such query for present low, present high, etc, for each condition parameter combination,
# and only checking the "self" unpropagated values.
#
# Now, the problem was: an experiment might appear twice in a globalExpressionCall,
# because of aggregation of raw conditions into global conditions. Example in Bgee 14.1:
#
# Microarray experiment E-TABM-20 produces a "present low quality" call in raw condition ID 178 for Bgee gene ID 371448;
# It also produces a "present high quality" call in raw condition ID 2499 for the same gene.
# Both the raw conditions 178 and 2499 are merged into the global condition ID 3388 (same organ/stage, but different sexes).
# The previous query wrongly identified an issue: the E-TABM-20 "present low quality" call was not found in the corresponding global call,
# because this experiment was (correctly) counted only once, as contributing a "present high quality". So, we needed to modify these queries
#
# So actually, it's very complicated to check extensively the association
# between raw data and global calls without duplicating all the Java code
# producing the global calls in some sort of SQL stored procedure.
# Instead, we are simply going to check that for each row in a experimentExpression table,
# there is at least a corresponding globalExpression call.
#
# ESTs
	@$(MYSQL) -e "SELECT t1.estLibraryId AS 'Missing EST global expression calls - estLibraryId', t1.expressionId FROM estLibraryExpression AS t1 LEFT OUTER JOIN expression AS t2 ON t1.expressionId = t2.expressionId LEFT OUTER JOIN globalCondToCond AS t3 ON t2.conditionId = t3.conditionId AND t3.conditionRelationOrigin = 'self' LEFT OUTER JOIN globalExpression AS t4 ON t2.bgeeGeneId = t4.bgeeGeneId AND t3.globalConditionId = t4.globalConditionId WHERE t4.globalExpressionId IS NULL OR estLibPresentHighSelfCount + estLibPresentLowSelfCount = 0 LIMIT 10;" >> $@.tmp 2>> $@.warn
#
# Affymetrix
	@$(MYSQL) -e "SELECT t1.microarrayExperimentId AS 'Missing Affymetrix global expression calls - microarrayExperimentId', t1.expressionId FROM microarrayExperimentExpression AS t1 LEFT OUTER JOIN expression AS t2 ON t1.expressionId = t2.expressionId LEFT OUTER JOIN globalCondToCond AS t3 ON t2.conditionId = t3.conditionId AND t3.conditionRelationOrigin = 'self' LEFT OUTER JOIN globalExpression AS t4 ON t2.bgeeGeneId = t4.bgeeGeneId AND t3.globalConditionId = t4.globalConditionId WHERE t4.globalExpressionId IS NULL OR affymetrixExpPresentHighSelfCount + affymetrixExpPresentLowSelfCount + affymetrixExpAbsentHighSelfCount + affymetrixExpAbsentLowSelfCount = 0 LIMIT 10;" >> $@.tmp 2>> $@.warn
#
# RNA-Seq
	@$(MYSQL) -e "SELECT t1.rnaSeqExperimentId AS 'Missing RNA-Seq global expression calls - rnaSeqExperimentId', t1.expressionId FROM rnaSeqExperimentExpression AS t1 LEFT OUTER JOIN expression AS t2 ON t1.expressionId = t2.expressionId LEFT OUTER JOIN globalCondToCond AS t3 ON t2.conditionId = t3.conditionId AND t3.conditionRelationOrigin = 'self' LEFT OUTER JOIN globalExpression AS t4 ON t2.bgeeGeneId = t4.bgeeGeneId AND t3.globalConditionId = t4.globalConditionId WHERE t4.globalExpressionId IS NULL OR rnaSeqExpPresentHighSelfCount + rnaSeqExpPresentLowSelfCount + rnaSeqExpAbsentHighSelfCount + rnaSeqExpAbsentLowSelfCount = 0 LIMIT 10;" >> $@.tmp 2>> $@.warn
#
# In situ hybridization
	@$(MYSQL) -e "SELECT t1.inSituExperimentId AS 'Missing in situ global expression calls - inSituExperimentId', t1.expressionId FROM inSituExperimentExpression AS t1 LEFT OUTER JOIN expression AS t2 ON t1.expressionId = t2.expressionId LEFT OUTER JOIN globalCondToCond AS t3 ON t2.conditionId = t3.conditionId AND t3.conditionRelationOrigin = 'self' LEFT OUTER JOIN globalExpression AS t4 ON t2.bgeeGeneId = t4.bgeeGeneId AND t3.globalConditionId = t4.globalConditionId WHERE t4.globalExpressionId IS NULL OR inSituExpPresentHighSelfCount + inSituExpPresentLowSelfCount + inSituExpAbsentHighSelfCount + inSituExpAbsentLowSelfCount = 0 LIMIT 10;" >> $@.tmp 2>> $@.warn
#
# ############################################
# DATA STATISTICS
# ############################################
	@printf "\nStatistics:\n" >> $@.tmp
#
# basic stats
#
	@$(MYSQL) -e "SELECT count(*) AS 'total globalCondition count' from globalCond; select IF(t2.anatEntityId IS NULL, 0, 1) AS anatEntityParam, IF(t2.stageId IS NULL, 0, 1) AS stageParam, IF(t2.sex IS NULL, 0, 1) AS sexParam, IF(t2.strain IS NULL, 0, 1) AS strainParam, count(*) AS 'globalCondition counts by condition parameter combination' from globalCond AS t2 GROUP BY anatEntityParam, stageParam, sexParam, strainParam ORDER BY anatEntityParam, stageParam, sexParam, strainParam; SELECT COUNT(*) AS 'total globalCondToCond count' FROM globalCondToCond; select IF(t2.anatEntityId IS NULL, 0, 1) AS anatEntityParam, IF(t2.stageId IS NULL, 0, 1) AS stageParam, IF(t2.sex IS NULL, 0, 1) AS sexParam, IF(t2.strain IS NULL, 0, 1) AS strainParam, t1.conditionRelationOrigin, count(*) AS 'globalCondToCond counts by condition parameter combination and relation origin' from globalCondToCond AS t1 INNER JOIN globalCond AS t2 ON t1.globalConditionId = t2.globalConditionId GROUP BY anatEntityParam, stageParam, sexParam, strainParam, t1.conditionRelationOrigin ORDER BY anatEntityParam, stageParam, sexParam, strainParam, t1.conditionRelationOrigin; select count(*) AS 'total globalExpression count' from globalExpression; select IF(t2.anatEntityId IS NULL, 0, 1) AS anatEntityParam, IF(t2.stageId IS NULL, 0, 1) AS stageParam, IF(t2.sex IS NULL, 0, 1) AS sexParam, IF(t2.strain IS NULL, 0, 1) AS strainParam, count(*) AS 'globalExpression counts by condition parameter combination' from globalExpression AS t1 INNER JOIN globalCond AS t2 ON t1.globalConditionId = t2.globalConditionId GROUP BY anatEntityParam, stageParam, sexParam, strainParam ORDER BY anatEntityParam, stageParam, sexParam, strainParam;" >> $@.tmp 2>> $@.warn
#
# advanced stats
#
	@$(MYSQL) -e "SELECT t2.speciesId, CONCAT(t3.genus, ' ', t3.species) AS speciesName, IF(t2.anatEntityId IS NOT NULL, 1, 0) AS anatEntityParam, IF(t2.stageId IS NOT NULL, 1, 0) AS stageParam, IF(t2.sex IS NULL, 0, 1) AS sexParam, IF(t2.strain IS NULL, 0, 1) AS strainParam, IF((estLibPresentHighTotalCount + affymetrixExpPresentHighTotalCount + inSituExpPresentHighTotalCount + rnaSeqExpPresentHighTotalCount) >= 2, 'PRESENT GOLD', IF((estLibPresentHighTotalCount + affymetrixExpPresentHighTotalCount + inSituExpPresentHighTotalCount + rnaSeqExpPresentHighTotalCount) >= 1 OR (estLibPresentLowTotalCount + affymetrixExpPresentLowTotalCount + inSituExpPresentLowTotalCount + rnaSeqExpPresentLowTotalCount) >= 2, 'PRESENT SILVER', IF((estLibPresentLowTotalCount + affymetrixExpPresentLowTotalCount + inSituExpPresentLowTotalCount + rnaSeqExpPresentLowTotalCount) >= 1, 'PRESENT BRONZE', IF((affymetrixExpAbsentHighTotalCount + inSituExpAbsentHighTotalCount + rnaSeqExpAbsentHighTotalCount) >= 2, 'ABSENT GOLD', IF((affymetrixExpAbsentHighTotalCount + inSituExpAbsentHighTotalCount + rnaSeqExpAbsentHighTotalCount) >= 1 OR (affymetrixExpAbsentLowTotalCount + inSituExpAbsentLowTotalCount + rnaSeqExpAbsentLowTotalCount) >= 2, 'ABSENT SILVER', IF((affymetrixExpAbsentLowTotalCount + inSituExpAbsentLowTotalCount + rnaSeqExpAbsentLowTotalCount) >= 1, 'ABSENT BRONZE', 'IMPOSSIBLE')))))) AS callType, count(*) AS countRows FROM globalExpression AS t1 INNER JOIN globalCond AS t2 ON t1.globalConditionId = t2.globalConditionId INNER JOIN species AS t3 ON t2.speciesId = t3.speciesId GROUP BY t2.speciesId, anatEntityParam, stageParam, sexParam, strainParam, callType ORDER BY t2.speciesId, anatEntityParam, stageParam, sexParam, strainParam, callType;" >> $@.tmp 2>> $@.warn
#
	@$(MYSQL) -e "SELECT t2.speciesId, CONCAT(t3.genus, ' ', t3.species) AS speciesName, COUNT(*) AS expressionCountRows FROM globalExpression AS t1 INNER JOIN globalCond AS t2 ON t1.globalConditionId = t2.globalConditionId INNER JOIN species AS t3 ON t2.speciesId = t3.speciesId GROUP BY t2.speciesId ORDER BY t2.speciesId;" >> $@.tmp 2>> $@.warn
#
	@$(MYSQL) -e "SELECT t3.speciesId, CONCAT(t4.genus, ' ', t4.species) AS speciesName, t2.conditionRelationOrigin, count(*) AS globalExpressionCountOrigin FROM globalExpression AS t1 INNER JOIN globalCondToCond AS t2 ON t1.globalConditionId = t2.globalConditionId INNER JOIN globalCond AS t3 ON t1.globalConditionId = t3.globalConditionId INNER JOIN species AS t4 ON t3.speciesId = t4.speciesId GROUP BY t3.speciesId, t2.conditionRelationOrigin ORDER BY t3.speciesId, t2.conditionRelationOrigin;" >> $@.tmp 2>> $@.warn
#
	@$(MV) $@.tmp $@



# This step is responsible for computing ranks for each Affymetrix chip
# and then store information abut max ranks/distinct rank counts
$(OUTPUT_DIR)ranksAffy:
	@perl ranks_affymetrix.pl -bgee=$(BGEECMD) -parallel_jobs=20 > $@.tmp 2> $@.warn
	@$(MYSQL) -e "UPDATE affymetrixChip AS t0 INNER JOIN ( SELECT t1.bgeeAffymetrixChipId, MAX(t1.rawRank) AS maxRank, COUNT(DISTINCT t1.rawRank) AS distinctRankCount FROM affymetrixProbeset AS t1 WHERE t1.expressionId IS NOT NULL GROUP BY t1.bgeeAffymetrixChipId ) AS ranks ON t0.bgeeAffymetrixChipId = ranks.bgeeAffymetrixChipId SET t0.chipMaxRank = ranks.maxRank, t0.chipDistinctRankCount = ranks.distinctRankCount WHERE EXISTS ( SELECT 1 FROM affymetrixProbeset AS t2 WHERE t2.expressionId IS NOT NULL AND t2.bgeeAffymetrixChipId = t0.bgeeAffymetrixChipId )" >> $@.tmp 2>> $@.warn
	@$(MYSQL) -e "UPDATE chipType AS t1 INNER JOIN ( SELECT chipTypeId, MAX(chipMaxRank) AS maxRank FROM affymetrixChip GROUP BY chipTypeId ) AS chipMaxRanks ON t1.chipTypeId = chipMaxRanks.chipTypeId SET t1.chipTypeMaxRank = chipMaxRanks.maxRank" >> $@.tmp 2>> $@.warn
	@printf "Min, max, average Affymetrix rank and distinct rank count per chip type: \n" >> $@.tmp
	@$(MYSQL) -e "SELECT t1.chipTypeId, t1.chipTypeMaxRank, MIN(t3.rawRank), MAX(t3.rawRank), AVG(t3.rawRank), MIN(t2.chipDistinctRankCount), MAX(t2.chipDistinctRankCount), AVG(t2.chipDistinctRankCount) FROM chipType AS t1 INNER JOIN affymetrixChip AS t2 ON t1.chipTypeId = t2.chipTypeId INNER JOIN affymetrixProbeset AS t3 ON t2.bgeeAffymetrixChipId = t3.bgeeAffymetrixChipId WHERE t3.rawRank IS NOT NULL GROUP BY t1.chipTypeId" >> $@.tmp 2>> $@.warn
	@$(MV) $@.tmp $@

# This step is responsible for computing ranks for each RNA-Seq library
# and then store information abut max ranks/distinct rank counts
# It is also possible to compute RNA-Seq ranks using a slurm cluster with the script run_rnaseq_ranks_on_cluster.pl. This script only run ranks_rnaseq.pl. Do not forget to run mysql queries of this rule once computation is over on the cluster.
$(OUTPUT_DIR)ranksRnaSeq:
	@perl ranks_rnaseq.pl -bgee=$(BGEECMD) -parallel_jobs=20 > $@.tmp 2> $@.warn
	@$(MYSQL) -e "UPDATE rnaSeqLibrary AS t0 INNER JOIN ( SELECT t1.rnaSeqLibraryId, MAX(t1.rawRank) AS maxRank, COUNT(DISTINCT t1.rawRank) AS distinctRankCount FROM rnaSeqResult AS t1 WHERE t1.rawRank IS NOT NULL GROUP BY t1.rnaSeqLibraryId ) AS ranks ON t0.rnaSeqLibraryId = ranks.rnaSeqLibraryId SET t0.libraryMaxRank = ranks.maxRank, t0.libraryDistinctRankCount = ranks.distinctRankCount" >> $@.tmp 2>> $@.warn
	@$(MYSQL) -e "INSERT INTO rnaSeqProtocolSpeciesMaxRank (rnaSeqProtocolId, speciesId, maxRank) SELECT t1.rnaSeqProtocolId, t2.speciesId, MAX(t1.libraryMaxRank) AS maxRank FROM rnaSeqLibrary AS t1 INNER JOIN cond AS t2 ON t1.conditionId = t2.conditionId GROUP BY t1.rnaSeqProtocolId, t2.speciesId" >> $@.tmp 2>> $@.warn
	@printf "Min, max, average RNA-Seq rank and distinct rank count per species: \n" >> $@.tmp
	@$(MYSQL) -e "SELECT t1.speciesId, MIN(t3.rawRank), MAX(t3.rawRank), AVG(t3.rawRank), MIN(t2.libraryDistinctRankCount), MAX(t2.libraryDistinctRankCount), AVG(t2.libraryDistinctRankCount) FROM cond AS t1 INNER JOIN rnaSeqLibrary AS t2 ON t1.conditionId = t2.conditionId INNER JOIN rnaSeqResult AS t3 on t2.rnaSeqLibraryId = t3.rnaSeqLibraryId WHERE t3.rawRank IS NOT NULL GROUP BY t1.speciesId" >> $@.tmp 2>> $@.warn
	@$(MV) $@.tmp $@

$(OUTPUT_DIR)ranksScRnaSeqFullLength:
	@perl ranks_scrnaseqfulllength.pl -bgee=$(BGEECMD) -parallel_jobs=15 > $@.tmp 2> $@.warn
	@$(MYSQL) -e "UPDATE scRnaSeqFullLengthLibrary AS t0 INNER JOIN ( SELECT t1.scRnaSeqFullLengthLibraryId, MAX(t1.rawRank) AS maxRank, COUNT(DISTINCT t1.rawRank) AS distinctRankCount FROM scRnaSeqFullLengthResult AS t1 WHERE t1.rawRank IS NOT NULL GROUP BY t1.scRnaSeqFullLengthLibraryId ) AS ranks ON t0.scRnaSeqFullLengthLibraryId = ranks.scRnaSeqFullLengthLibraryId SET t0.libraryMaxRank = ranks.maxRank, t0.libraryDistinctRankCount = ranks.distinctRankCount WHERE EXISTS ( SELECT 1 FROM scRnaSeqFullLengthResult AS t2 WHERE t2.rawRank IS NOT NULL AND t2.scRnaSeqFullLengthLibraryId = t0.scRnaSeqFullLengthLibraryId )" >> $@.tmp 2>> $@.warn
	@$(MYSQL) -e "INSERT INTO scRnaSeqFullLengthSpeciesMaxRank (speciesId, maxRank) SELECT t2.speciesId, MAX(t1.libraryMaxRank) FROM scRnaSeqFullLengthLibrary AS t1 INNER JOIN cond AS t2 ON t1.conditionId = t2.conditionId GROUP BY t2.speciesId" >> $@.tmp 2>> $@.warn
	@printf "Min, max, average scRNA-Seq full-length rank and distinct rank count per species: \n" >> $@.tmp
	@$(MYSQL) -e "SELECT t1.speciesId, MIN(t3.rawRank), MAX(t3.rawRank), AVG(t3.rawRank), MIN(t2.libraryDistinctRankCount), MAX(t2.libraryDistinctRankCount), AVG(t2.libraryDistinctRankCount) FROM cond AS t1 INNER JOIN scRnaSeqFullLengthLibrary AS t2 ON t1.conditionId = t2.conditionId INNER JOIN scRnaSeqFullLengthResult AS t3 on t2.scRnaSeqFullLengthLibraryId = t3.scRnaSeqFullLengthLibraryId WHERE t3.rawRank IS NOT NULL GROUP BY t1.speciesId" >> $@.tmp 2>> $@.warn
	@$(MV) $@.tmp $@

# EST and in situ rank computations are now done as part of this step
# It is also possible to generate global ranks using a slurm cluster with the script run_ranks_global_on_cluster.pl. This script only run ranks_global.pl. Do not forget to run mysql queries of this rule once processing finished on the cluster.
$(OUTPUT_DIR)ranksGlobal: $(OUTPUT_DIR)ranksAffy $(OUTPUT_DIR)ranksRnaSeq $(OUTPUT_DIR)ranksScRnaSeqFullLength
	@perl ranks_global.pl -bgee=$(BGEECMD) -parallel_jobs=20 -conds_per_job=10 > $@.tmp 2> $@.warn
	@echo "Min, max, average EST mean rank: \n" >> $@.tmp
#	@$(MYSQL) -e "SELECT MIN(estRank), MAX(estRank), AVG(estRank) FROM globalExpression AS t1 WHERE estRank IS NOT NULL" >> $@.tmp 2>> $@.warn
	@$(MYSQL) -e "SELECT MIN(estGlobalRank), MAX(estGlobalRank), AVG(estGlobalRank) FROM globalExpression AS t1 WHERE estGlobalRank IS NOT NULL" >> $@.tmp 2>> $@.warn
	@echo "Min, max, average in situ mean rank: \n" >> $@.tmp
#	@$(MYSQL) -e "SELECT MIN(inSituRank), MAX(inSituRank), AVG(inSituRank) FROM globalExpression AS t1 WHERE inSituRank IS NOT NULL" >> $@.tmp 2>> $@.warn
	@$(MYSQL) -e "SELECT MIN(inSituGlobalRank), MAX(inSituGlobalRank), AVG(inSituGlobalRank) FROM globalExpression AS t1 WHERE inSituGlobalRank IS NOT NULL" >> $@.tmp 2>> $@.warn
	@$(MV) $@.tmp $@

# It is also possible to normalize the ranks using a slurm cluster with the script run_ranks_global_on_cluster.pl. WARNING!!!! : As for bgee 15.0 the UNIL cluster queues allowed max 3 days of processing. Normalization for human and mouse took 10 days. DO NOT normalize ranks for these 2 species using the cluster. Normalization for all other species took less than one day
$(OUTPUT_DIR)norm_ranks: $(OUTPUT_DIR)ranksGlobal
	@perl normalize_ranks.pl -bgee=$(BGEECMD) -species=$(EMPTY_LIST) > $@.tmp 2> $@.warn
#	@printf "Expression IDs with ranks incorrectly generated: \n" >> $@.tmp
#	@$(MYSQL) -e "SELECT expressionId FROM expression WHERE inSituData != 'no data' AND inSituRank IS NULL OR estData != 'no data' AND estRank IS NULL OR affymetrixData != 'no data' AND affymetrixMeanRank IS NULL OR rnaSeqData != 'no data' AND rnaSeqMeanRank IS NULL" >> $@.tmp
#	@printf "End expression IDs with ranks incorrectly generated \n" >> $@.tmp
#	@printf "Expression IDs with ranks computed with no data: \n" >> $@.tmp
#	@$(MYSQL) -e "SELECT expressionId FROM expression WHERE inSituData = 'no data' AND inSituRank IS NOT NULL OR estData = 'no data' AND estRank IS NOT NULL OR affymetrixData = 'no data' AND affymetrixMeanRank IS NOT NULL OR rnaSeqData = 'no data' AND rnaSeqMeanRank IS NOT NULL" >> $@.tmp
#	@printf "End expression IDs with ranks computed with no data \n" >> $@.tmp
	@$(MV) $@.tmp $@


$(VERIFICATIONFILE): $(OUTPUT_DIR)conditions_not_existing $(OUTPUT_DIR)globalExpression $(OUTPUT_DIR)ranksAffy $(OUTPUT_DIR)ranksRnaSeq $(OUTPUT_DIR)ranksEST $(OUTPUT_DIR)ranksInSitu $(OUTPUT_DIR)norm_ranks
	@cat $(OUTPUT_DIR)norm_ranks >> $@.tmp
	@$(MV) $@.tmp $@

clean:
	-@$(RM) -R $(VERIFICATIONFILE) $(OUTPUT_DIR)conditions_not_existing $(OUTPUT_DIR)globalExpression $(OUTPUT_DIR)ranksAffy $(OUTPUT_DIR)ranksRnaSeq $(OUTPUT_DIR)ranksEST $(OUTPUT_DIR)ranksInSitu $(OUTPUT_DIR)norm_ranks
