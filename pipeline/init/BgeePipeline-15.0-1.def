Bootstrap: docker
From: ubuntu:20.04


%environment
	# Section to define environment variables that will be available to the container at runtime.
	# We use it to define the name, version and release of the container.
	export CONTAINER_NAME="BgeePipeline"
	export CONTAINER_VERSION="15.0"
	export CONTAINER_RELEASE="1"
	export LC_ALL="C"
	export ENSEMBLAPI=/usr/local/ensembl
	export PERL5LIB=$PERL5LIB:$ENSEMBLAPI/ensembl/modules:$ENSEMBLAPI/ensembl-compara/modules:$ENSEMBLAPI/ensembl-variation/modules:$ENSEMBLAPI/ensembl-funcgen/modules:$ENSEMBLAPI/ensembl-io/modules:$ENSEMBLAPI/ensembl-metadata/modules:$ENSEMBLAPI/ensembl-taxonomy/modules


%help
####################################################################################################
### Container metadata:
### ******************
### Name:       BgeePipeline
### Version:    15.0
### Release:    1
### Summary:    Bgee Pipeline external tools and libraries
### Group:      Container
### Maintainer: Sebastien Moretti
### License:    GPL-3.0
### URL:        https://bgee.org
###
###
### Description:
### ***********
### External tools and libraries required by the Bgee Pipeline.
###
###
### Running the container:
### *********************
### Available commands: java, perl, R, python3, mysql, mvn, kallisto, bustools, fastp, fastq-dump, blastn, makeblastdb, gtf_to_fasta
###
### To run any command in the container, replace <command to run> in command below.:
###   singularity exec BgeePipeline-15.0-1.sif <command> [<options>]
###
### To make a specific repository, such as "/scratch/<yourDirectory>", available
### inside the container add the option "--bind <directory>". Here is an example:
###   singularity exec --bind <directory> BgeePipeline-15.0-1.sif <command> [<options>]
###
### To run the default command for the container the command is the following. The default command
### generally displays the "help" section of the software installed in the container:
###   singularity run-help BgeePipeline-15.0-1.sif
###
####################################################################################################


%runscript
	echo "### This is the container for $CONTAINER_NAME-$CONTAINER_VERSION-$CONTAINER_RELEASE"


%labels
	# Section to set custom metadata to be added to the container
	# Use Open Containers Initiative (OCI)
	# See https://rehansaeed.com/docker-labels-depth/
	# See https://github.com/opencontainers/image-spec/blob/master/annotations.md
	# Exist also another structured label initiative: http://label-schema.org/ superceded by OCI now
	#NOTE Singularity uses label-schema labels internally!
	org.opencontainers.image.title         Bgee Pipeline external tools and libraries
	org.opencontainers.image.version       15.0
	org.opencontainers.image.vendor        Bgee.org
	org.opencontainers.image.authors       sebastien.moretti@sib.swiss
	org.opencontainers.image.url           https://bgee.org/
	org.opencontainers.image.documentation https://github.com/BgeeDB/bgee_pipeline
	org.opencontainers.image.licenses      GPL-3.0
	org.opencontainers.image.description   External tools and libraries required by the Bgee Pipeline.
	soft.java.version        11.0.15+10
	soft.perl.version        5.30.0
	soft.R.version           4.2.1
	soft.python3.version     3.8.10
	soft.mysql.version       8.0.29
	soft.maven.version       3.6.3
	soft.kallisto.version    0.48.0
	soft.bustools.version    0.41.0
	soft.fastp.version       0.23.2
	soft.sratoolkit.version  3.0.0
	soft.blastplus.version   2.9.0+
	soft.tophat.version      2.1.2


%post
	export THREADS=8
	#OS update
	apt-get update  -y
	apt-get upgrade -y
	export DEBIAN_FRONTEND=noninteractive
	apt install -y --no-install-recommends gnupg wget git cmake autoconf apt-utils ca-certificates libterm-readline-gnu-perl readline-common software-properties-common dirmngr build-essential libssl-dev libncurses5-dev libcurl4-openssl-dev liblzma-dev libbz2-dev libboost-all-dev sqlite3 libsqlite3-0 libsqlite3-dev libgsl0-dev zlib1g-dev libxml2-dev libgmp-dev libgmp10 libmpfr-dev libhdf5-dev libisal-dev libdeflate-dev libbam-dev libgeos-dev
	apt install -y --no-install-recommends openjdk-11-jdk perl python3 python3-pip mysql-client maven ncbi-blast+

	#Install R
	wget -qO- https://cloud.r-project.org/bin/linux/ubuntu/marutter_pubkey.asc | tee -a /etc/apt/trusted.gpg.d/cran_ubuntu_key.asc
	add-apt-repository "deb https://cloud.r-project.org/bin/linux/ubuntu $(lsb_release -cs)-cran40/"
	apt-get install -y --no-install-recommends  r-base r-base-dev
	# Install Bioconductor
	R -e 'install.packages("BiocManager")'
	#Use the argument ask=FALSE to update old packages without being prompted
	R -e 'BiocManager::install(ask=FALSE)'
	#Configure Java in R
	R CMD javareconf
	# Install other R lib
	R -e 'BiocManager::install("AnnotationDbi")'
	R -e 'BiocManager::install("BUSpaRse")'
	R -e 'BiocManager::install("BgeeCall")'
	R -e 'BiocManager::install("Biobase")'
	R -e 'BiocManager::install("Biostrings")'
	R -e 'BiocManager::install("DropletUtils")'
	R -e 'BiocManager::install("GenomicFeatures")'
	R -e 'BiocManager::install("HCAExplorer")'
	R -e 'BiocManager::install("HelpersMG")'
	R -e 'BiocManager::install("LaplacesDemon")'
	R -e 'BiocManager::install("Matrix")'
	R -e 'BiocManager::install("R.utils")'
	R -e 'BiocManager::install("RCurl")'
	R -e 'BiocManager::install("Rgraphviz")'
	R -e 'BiocManager::install("Runiversal")'
	R -e 'BiocManager::install("SRAdb")'
	R -e 'BiocManager::install("Seurat")'
	R -e 'BiocManager::install("UniprotR")'
	R -e 'BiocManager::install("affy")'
	R -e 'BiocManager::install("biomaRt")'
	R -e 'BiocManager::install("celeganscdf")'
	R -e 'BiocManager::install("celegansprobe")'
	R -e 'BiocManager::install("data.table")'
	R -e 'BiocManager::install("devtools")'
	R -e 'BiocManager::install("dplyr")'
	R -e 'BiocManager::install("drosgenome1cdf")'
	R -e 'BiocManager::install("drosgenome1probe")'
	R -e 'BiocManager::install("drosophila2cdf")'
	R -e 'BiocManager::install("drosophila2probe")'
	R -e 'BiocManager::install("edgeR")'
	R -e 'BiocManager::install("fdrtool")'
	R -e 'BiocManager::install("forcats")'
	R -e 'BiocManager::install("gcrma")'
	R -e 'BiocManager::install("genefilter")'
	R -e 'BiocManager::install("ggExtra")'
	R -e 'BiocManager::install("gghighlight")'
	R -e 'BiocManager::install("ggplot2")'
	R -e 'BiocManager::install("gridExtra")'
	R -e 'BiocManager::install("gsubfn")'
	R -e 'BiocManager::install("hgfocuscdf")'
	R -e 'BiocManager::install("hgfocusprobe")'
	R -e 'BiocManager::install("hgu133a2cdf")'
	R -e 'BiocManager::install("hgu133a2probe")'
	R -e 'BiocManager::install("hgu133acdf")'
	R -e 'BiocManager::install("hgu133aprobe")'
	R -e 'BiocManager::install("hgu133bcdf")'
	R -e 'BiocManager::install("hgu133bprobe")'
	R -e 'BiocManager::install("hgu133plus2cdf")'
	R -e 'BiocManager::install("hgu133plus2probe")'
	R -e 'BiocManager::install("hgu95acdf")'
	R -e 'BiocManager::install("hgu95aprobe")'
	R -e 'BiocManager::install("hgu95av2cdf")'
	R -e 'BiocManager::install("hgu95av2probe")'
	R -e 'BiocManager::install("hgu95bcdf")'
	R -e 'BiocManager::install("hgu95bprobe")'
	R -e 'BiocManager::install("hgu95ccdf")'
	R -e 'BiocManager::install("hgu95cprobe")'
	R -e 'BiocManager::install("hgu95dcdf")'
	R -e 'BiocManager::install("hgu95dprobe")'
	R -e 'BiocManager::install("hgu95ecdf")'
	R -e 'BiocManager::install("hgu95eprobe")'
	R -e 'BiocManager::install("htmg430acdf")'
	R -e 'BiocManager::install("htmg430aprobe")'
	R -e 'BiocManager::install("hu6800cdf")'
	R -e 'BiocManager::install("hu6800probe")'
	R -e 'BiocManager::install("lattice")'
	R -e 'BiocManager::install("limma")'
	R -e 'BiocManager::install("magrittr")'
	R -e 'BiocManager::install("mclust")'
	R -e 'BiocManager::install("methods")'
	R -e 'BiocManager::install("mgu74acdf")'
	R -e 'BiocManager::install("mgu74aprobe")'
	R -e 'BiocManager::install("mgu74av2cdf")'
	R -e 'BiocManager::install("mgu74av2probe")'
	R -e 'BiocManager::install("mgu74bv2cdf")'
	R -e 'BiocManager::install("mgu74bv2probe")'
	R -e 'BiocManager::install("mgu74cv2cdf")'
	R -e 'BiocManager::install("mgu74cv2probe")'
	R -e 'BiocManager::install("moe430acdf")'
	R -e 'BiocManager::install("moe430aprobe")'
	R -e 'BiocManager::install("moe430bcdf")'
	R -e 'BiocManager::install("moe430bprobe")'
	R -e 'BiocManager::install("mouse4302cdf")'
	R -e 'BiocManager::install("mouse4302probe")'
	R -e 'BiocManager::install("mouse430a2cdf")'
	R -e 'BiocManager::install("mouse430a2probe")'
	R -e 'BiocManager::install("mu11ksubacdf")'
	R -e 'BiocManager::install("mu11ksubaprobe")'
	R -e 'BiocManager::install("mu11ksubbcdf")'
	R -e 'BiocManager::install("mu11ksubbprobe")'
	R -e 'BiocManager::install("plyr")'
	R -e 'BiocManager::install("rJava")'
	R -e 'BiocManager::install("rae230acdf")'
	R -e 'BiocManager::install("rae230aprobe")'
	R -e 'BiocManager::install("readr")'
	R -e 'BiocManager::install("reshape2")'
	R -e 'BiocManager::install("rgu34acdf")'
	R -e 'BiocManager::install("rgu34aprobe")'
	R -e 'BiocManager::install("rhesuscdf")'
	R -e 'BiocManager::install("rhesusprobe")'
	R -e 'BiocManager::install("rjson")'
	R -e 'BiocManager::install("stringr")'
	R -e 'BiocManager::install("tibble")'
	R -e 'BiocManager::install("tools")'
	R -e 'BiocManager::install("topGO")'
	R -e 'BiocManager::install("tximport")'
	R -e 'BiocManager::install("zebrafishcdf")'
	R -e 'BiocManager::install("zebrafishprobe")'

	# Install Perl lib
	apt-get install -y --no-install-recommends  libipc-run-perl libio-compress-perl
	cpan Bundle::CPAN
	cpan Archive::Tar
	cpan Archive::Zip
	cpan Array::Utils
	#cpan Bio::EnsEMBL::Registry
	cpan Bio::SeqIO
	cpan Cpanel::JSON::XS
	cpan DBI
	cpan Data::Dumper
	cpan Digest::SHA
	cpan Exporter
	cpan File::Basename
	cpan File::Copy
	cpan File::Find
	cpan File::Path
	cpan File::Slurp
	cpan File::Spec
	cpan FindBin
	cpan Getopt::Long
	cpan HTTP::Request
	#cpan IO::Compress::Gzip
	cpan IO::Socket
	#cpan IO::Uncompress::Gunzip
	cpan LWP::Simple
	cpan LWP::UserAgent
	cpan List::Compare
	cpan List::MoreUtils
	cpan List::Util
	cpan Parallel::ForkManager
	cpan Sort::Naturally
	cpan Spreadsheet::ParseExcel
	cpan Spreadsheet::ParseXLSX
	cpan Spreadsheet::Read
	cpan Spreadsheet::WriteExcel
	cpan Test::More
	cpan Text::CSV
	cpan Time::HiRes
	cpan Time::localtime
	cpan Webservice::InterMine
	cpan XML::Fast
	# Install Ensembl Perl API
	mkdir /usr/local/ensembl
	cd /usr/local/ensembl/
	git clone https://github.com/Ensembl/ensembl-git-tools.git
	export PATH=$PWD/ensembl-git-tools/bin:$PATH
	git ensembl --clone api
	#TODO Do we need Ensembl web API Perl lib???

	# Install Python3 lib
	pip3 install IPython
	pip3 install intermine
	pip3 install matplotlib
	pip3 install numpy
	#pip3 install os
	pip3 install pandas
	pip3 install seaborn
	pip3 install simplejson

	# Install Kallisto
	cd /usr/local
	wget 'https://github.com/pachterlab/kallisto/archive/refs/tags/v0.48.0.tar.gz'
	tar xvfz v*.tar.gz && rm -f v*.tar.gz
	cd kallisto-*/ext/htslib/ && autoheader && autoconf && ./configure --prefix=$PWD --disable-bz2 --disable-lzma --disable-libcurl && make lib-static
	cd ../.. && mkdir build && cd build/ && cmake .. && make -j$THREADS && make install
	cd ../.. && rm -Rf kallisto-*/

	# Install Bustools
	cd /usr/local
	wget 'https://github.com/BUStools/bustools/archive/refs/tags/v0.41.0.tar.gz'
	tar xvfz v*.tar.gz && rm -f v*.tar.gz
	cd bustools-*/
	cmake . && make -j$THREADS && make install
	cd .. && rm -rf bustools-*/

	# Install FastP
	cd /usr/local
	wget 'https://github.com/OpenGene/fastp/archive/refs/tags/v0.23.2.tar.gz'
	tar xvfz v*.tar.gz && rm -f v*.tar.gz
	cd fastp-*/
	make clean && make && install fastp /usr/local/bin/
	cd .. && rm -rf fastp-*/

	# Install SRAtoolkit
	cd /usr/local
	wget 'https://ftp-trace.ncbi.nlm.nih.gov/sra/sdk/3.0.0/sratoolkit.3.0.0-ubuntu64.tar.gz'
	tar xvfz sratoolkit*.tar.gz && rm -f sratoolkit*.tar.gz
	cd sratoolkit.*-ubuntu64/bin/
	ln -s $PWD/* /usr/local/bin/

	# Install tophat (gtf_to_fasta)
	cd /usr/local
	wget 'https://github.com/infphilo/tophat/archive/refs/tags/v2.1.2.tar.gz'
	tar xvfz v*.tar.gz && rm -f v*.tar.gz
	cd tophat-*/
	./autogen.sh
	./configure --with-boost --with-boost-thread=-lboost_thread
	#FIXME looks to have issues at compile time with recent boost versions
	# see https://github.com/DaehwanKimLab/tophat/issues/62
	#make && make check && make install
	cd src/ && make gtf_to_fasta && install gtf_to_fasta /usr/local/bin/ && cd ..
	cd .. && rm -Rf tophat-*/


	# CLEANING
	## So try to remove manually useless stuff
	apt remove -y  *-dev wget cmake make swig autoconf check gcc g++ gfortran git python3-pip rpm2cpio cpio doxygen rsync
	apt-get clean
	rm -rf /var/lib/apt/lists/*


%test
	# no test

